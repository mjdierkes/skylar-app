name: TestFlight Build and Deploy

on:
  workflow_run:
    workflows: ["Build and Compile"]
    branches: [main]
    types: 
      - completed

env:
  DEVELOPER_DIR: /Applications/Xcode.app/Contents/Developer
  WORKSPACE: MyApp.xcworkspace
  SCHEME: MyApp
  DERIVED_DATA_PATH: ./DerivedData
  ARCHIVE_PATH: ./build/MyApp.xcarchive

jobs:
  build_testflight:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    name: Archive & Deploy to TestFlight
    runs-on: macos-15-sequoia
    steps:
      # 1. Initialize an empty error log.
      - name: Initialize Error Log
        run: echo "" > error.log

      # 2. Checkout your repository.
      - name: Checkout Repository
        uses: actions/checkout@v3

      # 3. Select Xcode Version
      - name: Select Xcode Version
        run: sudo xcode-select -s ${{ env.DEVELOPER_DIR }}

      # 4. Download Build Artifacts
      - name: Download Build Artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-artifacts
          path: .

      # 5. Setup Certificates and Provisioning Profiles
      - name: Setup Certificates and Provisioning Profiles
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
          BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.BUILD_PROVISION_PROFILE_BASE64 }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          # Create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
          security set-keychain-settings -t 3600 -l ~/Library/Keychains/build.keychain

          # Import certificate to keychain
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode --output certificate.p12
          security import certificate.p12 -k build.keychain -P "$P12_PASSWORD" -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$KEYCHAIN_PASSWORD" build.keychain

          # Import provisioning profile
          echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode --output profile.mobileprovision
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp profile.mobileprovision ~/Library/MobileDevice/Provisioning\ Profiles/

      # 6. Archive the app (Release build) and export the IPA.
      - name: Archive for TestFlight
        run: |
          set -o pipefail
          xcodebuild -workspace ${{ env.WORKSPACE }} \
                    -scheme ${{ env.SCHEME }} \
                    -archivePath ${{ env.ARCHIVE_PATH }} \
                    -derivedDataPath ${{ env.DERIVED_DATA_PATH }} \
                    archive -configuration Release \
                    -parallelizeTargets 2>&1 | tee -a error.log | xcpretty

          xcodebuild -exportArchive \
                    -archivePath ${{ env.ARCHIVE_PATH }} \
                    -exportOptionsPlist exportOptions.plist \
                    -exportPath build \
                    -derivedDataPath ${{ env.DERIVED_DATA_PATH }} \
                    2>&1 | tee -a error.log | xcpretty
        shell: bash

      # 7. Upload the IPA to TestFlight.
      - name: Upload to TestFlight
        uses: apple-actions/upload-testflight-build@v1
        with:
          app-path: build/MyApp.ipa
          issuer-id: ${{ secrets.APP_STORE_CONNECT_ISSUER_ID }}
          api-key-id: ${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}
          api-private-key: ${{ secrets.APP_STORE_CONNECT_API_PRIVATE_KEY }}

      # 8. Cleanup Certificates
      - name: Cleanup Certificates
        if: always()
        run: |
          security delete-keychain build.keychain
          rm -f certificate.p12
          rm -f profile.mobileprovision

      # 9. On failure, extract and condense error logs, then send via webhook.
      - name: Notify on Failure
        if: failure()
        env:
          WEBHOOK_URL: ${{ secrets.WEBHOOK_URL }}
        run: |
          if [ -f error.log ] && [ -s error.log ]; then
            CONDENSED=$(tail -n 30 error.log | sed 's/\x1b\[[0-9;]*m//g')
          else
            CONDENSED="Build failed but no error log captured."
          fi
          PAYLOAD=$(jq -n --arg text "$CONDENSED" --arg workflow "TestFlight" '{text: "❌ TestFlight Build Failed:\n" + $text}')
          echo "$PAYLOAD" > payload.json
          curl -X POST -H "Content-Type: application/json" -d @payload.json "$WEBHOOK_URL"
        shell: bash

      # 10. Upload Error Log
      - name: Upload Error Log
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: testflight-error-log
          path: error.log
          retention-days: 5
