name: Appetize Build and Deploy

on:
  workflow_run:
    workflows: ["Build and Compile"]
    types:
      - completed

env:
  DEVELOPER_DIR: /Applications/Xcode.app/Contents/Developer
  WORKSPACE: MyApp.xcworkspace
  SCHEME: MyApp
  DERIVED_DATA_PATH: ./DerivedData

jobs:
  build_appetize:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    name: Build & Deploy to Appetize.io
    runs-on: macos-15-sequoia
    steps:
      # 1. Initialize an empty error log.
      - name: Initialize Error Log
        run: echo "" > error.log

      # 2. Checkout your repository.
      - name: Checkout Repository
        uses: actions/checkout@v3

      # 3. Select Xcode Version
      - name: Select Xcode Version
        run: sudo xcode-select -s ${{ env.DEVELOPER_DIR }}

      # 4. Download Build Artifacts
      - name: Download Build Artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-artifacts
          path: .

      # 5. Build the app for Appetize.io and create a zipped .app bundle.
      - name: Build App for Appetize.io
        run: |
          set -o pipefail
          # Build specifically for Appetize using the existing DerivedData
          xcodebuild -workspace ${{ env.WORKSPACE }} \
                    -scheme ${{ env.SCHEME }} \
                    -destination 'platform=iOS Simulator,name=iPhone 14' \
                    -configuration Debug \
                    -derivedDataPath ${{ env.DERIVED_DATA_PATH }} \
                    -parallelizeTargets build 2>&1 | tee -a error.log | xcpretty

          # Locate and zip the .app bundle
          APP_PATH=$(find ${{ env.DERIVED_DATA_PATH }}/Build/Products/Debug-iphonesimulator -name "*.app" | head -n 1)
          echo "Found app bundle at: $APP_PATH"
          
          # Create a zip directory if it doesn't exist
          mkdir -p build/appetize
          
          # Zip the .app bundle
          cd "$(dirname "$APP_PATH")"
          zip -r "${GITHUB_WORKSPACE}/build/appetize/app.zip" "$(basename "$APP_PATH")"
        shell: bash

      # 6. Upload the zipped build to Appetize.io.
      - name: Upload to Appetize.io
        uses: appetizeio/github-action-appetize@v1.0.3
        with:
          apiToken: ${{ secrets.APPETIZE_API_TOKEN }}
          appFile: build/appetize/app.zip
          platform: 'ios'

      # 7. Notify on failure
      - name: Notify on Failure
        if: failure()
        env:
          WEBHOOK_URL: ${{ secrets.WEBHOOK_URL }}
        run: |
          if [ -f error.log ] && [ -s error.log ]; then
            CONDENSED=$(tail -n 30 error.log | sed 's/\x1b\[[0-9;]*m//g')
          else
            CONDENSED="Build failed but no error log captured."
          fi
          PAYLOAD=$(jq -n --arg text "$CONDENSED" --arg workflow "Appetize" '{text: "❌ Appetize Build Failed:\n" + $text}')
          echo "$PAYLOAD" > payload.json
          curl -X POST -H "Content-Type: application/json" -d @payload.json "$WEBHOOK_URL"
        shell: bash

      # 8. Upload Error Log
      - name: Upload Error Log
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: appetize-error-log
          path: error.log
          retention-days: 5
